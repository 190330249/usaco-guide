{
  "usaco-1044": "usaco-1044",
  "usaco-1045": "usaco-1045",
  "Split the graph into its biconnected components. See Infoarena - Biconex for how to do this.": "ys-TwoEdgeConnectedComponents",
  "cses-2177": "cses-2177",
  "Instead of counting the number of bad pairs, count the number of good pairs and subtract that from the total number of all pairs. Notice how if we remove a node, we get several connected components. We can then use biconnected components to determine the sizes of these components and so we can count the number of good pairs after removing each node.": "poi-08-blockade",
  "apio-18-duathlon": "apio-18-duathlon",
  "https://ceoi2015.fi.muni.cz/solutions/solutions1.pdf": "ceoi-15-pipes",
  "coci-19-dzumbus": "coci-19-dzumbus",
  "ioi-05-rivers": "ioi-05-rivers",
  "ostap-tree": "cf-735E",
  "coci-period": "dmoj-COCIPeriodni",
  "https://codeforces.com/blog/entry/60357?#comment-441928": "cf-997E",
  "joi-16-skyscraper": "joi-16-skyscraper",
  "@below": "sapo-15-SpaceJazz",
  "usaco-949": "usaco-949",
  "https://github.com/boi-2014/tasks/blob/master/solutions/analysis/postmen.tex": "baltic-14-postmen",
  "https://bytefreaks.net/cyprus-computer-society/tasks-balkan-olympiad-in-informatics-2016": "balkan-16-acrobat",
  "joi-18-snake-escaping": "joi-18-SnakeEscaping",
  "Solve the case where for each binary string s, a 1 means that the adjacent men know each other, and the 0 means nothing: they can know each other or not.": "cf-1326F2",
  "apio-17-rainbow": "dmoj-LandOfTheRainbowGold",
  "poi-18-wie": "poi-18-polynomial",
  "base conversion in $mathcal{O}(Nlog^2N)$": "kattis-aliencodebreaking",
  "O(Nlog^2N)": "dmoj-BigInteger",
  "Fun fact: the same problem appeared in the 1999 Italian Maths Olympiad": "ioi-05-RectangleGame",
  "https://github.com/boi-2014/tasks/blob/master/solutions/analysis/coprobber.pdf": "baltic-14-CopAndRobber",
  "https://ioinformatics.org/files/ioi2016solutions.pdf": "ioi-16-aliens",
  " LCT isn't needed because the queries are offline": "spoj-DynamicConnectivity",
  "test connectivity": "cf-1109F",
  "link, cut, min edge along path": "dmoj-SquirrelCities",
  "* switching can be done with LCT access, set min on path with lazy prop  * [Solution](https://codeforces.com/contest/1344/submission/79212522)": "cf-1344E",
  "tree + one edge": "cf-117E",
  "LCT not needed, but can directly apply solution from The Applicant": "cfgym-101620101620",
  "too many operations D:": "dmoj-DynamicTreeTest",
  "apio-16-gap": "apio-16-gap",
  "http://www.ceoi2016.ro/wp-content/uploads/2016/08/icc-solution.pdf": "ceoi-16-icc",
  "apio-17-koala": "apio-17-KoalaGame",
  "ioi-19-transfer": "ioi-19-transfer",
  "ceoi-14-question": "ceoi-14-question",
  "joi-15-navigation": "joi-15-navigation",
  "joi-18-airline": "joi-18-airline",
  "https://codeforces.com/blog/entry/66022?#comment-500756": "joi-19-TwoTransportations",
  "@Later": "cf-1083E",
  "http://boi2011.ro/resurse/tasks/2circles-sol.pdf": "balkan-11-2circles",
  "http://infosb.net/ceoi2009/tasks/solutions.doc": "ceoi-09-harbingers",
  "cses-1694": "cses-1694",
  "Editorial solution is online N sqrt N, but you can solve this in offline N log N using this trick.": "cf-1217F",
  "cses-1686": "cses-1686",
  "Compress SCC and then run tree DP": "poi-18-BikePaths",
  "https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/POI/official/2012/editorial/fes.pdf": "poi-12-festival",
  "similar to [Art](https://codeforces.com/gym/102394/problem/A)": "rmi-RestoreArray",
  "apio-17-merchant": "apio-17-TravelingMerchant",
  "apio-13-taskauthor": "apio-13-tasksauthor",
  "4 layers. Source -> Strings -> Characters -> Sink": "cf-237E",
  "I view it as a N x 3 lattice-pattern of edges. The top two layers correspond to an 'entrance' and 'exit' node for each array element, connected by an edge of flow 1 and cost -1. These are the only nodes with costs. Each 'exit' node points to to next 'exit' node of the same value, and also point to the 3rd layer. The 3rd layer tracks modulos, and points to the next layer 3 node with the same modulo. Every entrance node has at most 3 in-edges: from the closest +1 exit node, the closest -1 exit node, and the closest layer 3 node with the same modulo. Overall a graph with $approx 3N$ nodes and $approx 9N$ edges.": "cf-818G",
  "https://codeforces.com/blog/entry/74493?#comment-586020": "cf-1316E",
  "CF-1427G": "cf-1427G",
  "cses-1695": "cses-1695",
  "For each a from p to 1, calculate the number of possible cards with that value of a.": "cf-815D",
  "Genfuncs not required but possibly helpful": "cfgym-102059K",
  "cses-2132": "cses-2132",
  "@B": "cses-1622",
  "Equivalent Problem: GP of Wroclaw 20 J": "usaco-650",
  "binary search on top of slope trick": "cf-802O",
  "\"Potatoes\" on tree!!": "ICPCWF-ConquerTheWorld",
  "Naive KMP works. Just be careful about I/O": "kattis-stringmatching",
  "https://github.com/thecodingwizard/competitive-programming/blob/master/POI/POI%2006-Periods.cpp": "poi-06-PeriodsOfWords",
  "baltic-19-necklace": "baltic-19-necklace",
  "Run KMP, except each state needs to be considered as not only a length, but also mapping of pattern to # of spots": "poj-USACOGold05CowPatterns",
  "poi-05-sza": "poi-05-template",
  "https://oi.edu.pl/static/attachment/20110713/ceoi-2011.pdf#page=16": "ceoi-11-matching",
  "dp[i] = answer for suffix [i, N]. Transitions form some continuous range and can be determined using two-pointer and z-function for long integer comparison": "cf-1051E",
  "N^3 solution. Brute force every range of rows, and run manachers along the columns": "cf-1080E",
  "Find longest prefix that is mirror of suffix. Add these to the answer. Then use manachers/any other palindrome detection algorithm to determine the longest prefix/suffix palindrome of the remaining string.": "cf-1326D2",
  "https://hsin.hr/coci/contest3_solutions.zip": "coci-21-vlak",
  "Answer is max number of nodes in trie. Count the max number of nodes on each depth of the trie, and add it all up.": "cf-1083B",
  "https://hsin.hr/coci/archive/2019_2020/contest4_solutions.zip": "coci-20-klasika",
  "http://s3-ap-northeast-1.amazonaws.com/data.cms.ioi-jp.org/open-2016/2016-open-selling_rna-sol-en.pdf": "joi-16-SellingRNAStrands",
  "Path xor from node u to node v is equal to root_xor(u) xor root_xor(v). Sort these root_xor values. Use implicit trie over all values of root_xor(u) ^ root_xor(v) and traverse the trie. Each node of the trie can be treated as a set of pairs of ranges in the sorted root_xor array, such that the xor of two values in each range results in a prefix of that trie node. (Read editorial for clear explanation)": "cf-1055F",
  "Build aho-corasick over all censored words": "usaco-533",
  "Count number of pairs for each cut-off point. Run aho-corasick twice: normally, and reversed": "cf-1202E",
  "apio-14-palindrome": "apio-14-palindrome",
  "Try building suffix tree/automaton and converting!": "cf-2A",
  "Try solving it using Suffix Tree or Suffix Automaton!": "kattis-stringmultimatching",
  "Remember, each path (starting from the root) in a suffix automaton is a distinct substring!": "spoj-LexicographicalStringSearch",
  "balkan-15-clarkson": "balkan-15-clarkson",
  "cses-1113": "cses-1113",
  "https://codeforces.com/blog/entry/82495?#comment-694343": "tc-TaleOfTwoSquares",
  "@Below": "cses-1095",
  "easy-query": "kattis-easyquery",
  "Just implement a 2D BIT. See [thecodingwizard's implementation](https://github.com/thecodingwizard/competitive-programming/blob/master/cses/Forest%20Queries%20II.cpp).": "cses-1739",
  "https://ioinformatics.org/files/ioi2007solutions.pdf": "ioi-07-pairs",
  "usaco-722": "usaco-722",
  "https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/POI/official/2006/editorial/tet.pdf": "poi-06-Tetris3D",
  "ioi-13-game": "ioi-13-game",
  "http://s3-ap-northeast-1.amazonaws.com/data.cms.ioi-jp.org/open-2017/2017-open-golf-sol-en.pdf": "joi-17-golf",
  "https://boi2019.eio.ee/wp-content/uploads/2019/04/nautilus.sol_.en_.pdf": "baltic-19-nautilus",
  "baltic-10-candies": "baltic-10-candies",
  "Again, the intended solution runs in $mathcal{O}(N^3)$. Of course, it is still possible to pass $mathcal{O}(N^4)$ solutions with bitset! See the analysis [here](http://www.usaco.org/current/data/sol_triangles_platinum_feb20.html).": "usaco-1021",
  "baltic-15-tug": "baltic-15-TugOfWar",
  "cses-2079": "cses-2079",
  "Keep setting the centroid to the next rank": "cf-321C",
  "cses-2080": "cses-2080",
  "cses-2081": "cses-2081",
  "Build centroid decomp on the whole tree first and perform updates for each 'root' as expected.": "usaco-817",
  "Similar to Ceil the Commander, but annoying to interpret input and order regions": "cf-776F",
  "M is coprime to 10, so use Euler's Theorem and maps storing mods to count pairs.": "cf-715C",
  "DP + Centroid": "cf-1140G",
  "http://s3-ap-northeast-1.amazonaws.com/data.cms.ioi-jp.org/open-2014/2014-open-d1-factories-review.pdf": "joi-14-factories",
  "DMOJ-bob-equilibrium": "dmoj-BobEquilibrium",
  "DMOJ-time-travel": "dmoj-TimeTravellerImaxblue",
  "joi-13-sync": "joi-13-synchronization",
  "tight time limit": "usaco-793",
  "cses-1750": "cses-1750",
  "cses-1160": "cses-1160",
  "poi-10-zab": "poi-10-frog",
  "http://boi2019.eio.ee/wp-content/uploads/2019/05/valley.sol_.en-1.pdf": "baltic-19-valley",
  "baltic-17-toll": "baltic-17-toll",
  "baltic-15-edi": "baltic-15-editor",
  "First, split each path A-B into the 2 paths A-lca(A, B) and B-lca(A, B). We can then use a Fenwick tree to increment the values of each edge on those paths.": "usaco-576",
  "Copy of CF Brain Network \"Hard\": https://codeforces.com/contest/690/problem/C3": "usaco-817",
  "baltic-17-railway": "baltic-17-railway",
  "http://apio-olympiad.org/2010/solutions.pdf": "apio-10-signaling",
  "https://infosb.net/ceoi2009/tasks/solutions.doc": "ceoi-09-harbingers",
  "http://www.ioi2002.or.kr/eng/tasks/batch-handout.pdf": "ioi-02-BatchScheduling",
  "apio-14-sequence": "apio-14-SplitTheSequence",
  "poi-11-pio": "poi-11-LightningConductor",
  "usaco-626": "usaco-626",
  "doesn't require convex hull since coordinates are small": "kattis-roberthood",
  "testing whether points are inside hull": "usaco-382",
  "enclosing rectangle": "kattis-fenceortho",
  "https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/COI/official/2015/final-exam2/solutions.pdf": "coi-15-nafta",
  "joi-13-bubblesort": "joi-13-bubblesort",
  "joi-14-secret": "joi-14-secret",
  "@CPH 10.5": "cses-1653",
  "izho-14-bank": "izho-14-bank",
  "http://boi2019.eio.ee/wp-content/uploads/2019/05/olymp.sol_.en_.pdf": "baltic-19-olympiads",
  "Generalization of RoboHerd.": "cco-ShoppingPlans",
  "(english description?), [Relevant Paper](https://www.ics.uci.edu/~eppstein/pubs/Epp-SJC-98.pdf), Can use to solve RoboHerd!": "ys-KthShortestWalk",
  "kattis-polygonarea": "kattis-polygonarea",
  "cut-length": "cf-598F",
  "kattis-maxcolinear": "kattis-maxcolinear",
  "kattis-birthdaycake": "kattis-birthdaycake",
  "Pure implementation; see Benq's library code, it has a function for LCA. Though this problem can be solved with binary lifting as well, you should do it with HLD to get practice.": "cses-1688",
  "See adamant's blog.": "hr-SubtreesPaths",
  "This has a linear time solution, but it's easier to make modifications to the HLD template.": "usaco-970",
  "cses-2134": "cses-2134",
  "Function order matters! Maintain two segment trees, one for going up and the other for going down the tree.": "ys-VertexSetPathComposite",
  "maybe hard to see why this applies here, gives $mathcal{O}(N\\log N)$ while most people solved it with some factor of $\\sqrt N$": "cf-1254D",
  "@@": "tlx-TreeGame",
  "$mathcal{O}(N\\log N)$ :D": "joi-13-synchronization",
  "http://s3-ap-northeast-1.amazonaws.com/data.cms.ioi-jp.org/open-2018/2018-open-catdog-sol-en.pdf": "joi-18-CatsOrDogs",
  "@CPH 23.2": "cses-1722",
  "@CPH 23.3": "cses-1724",
  "https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/Baltic/Baltic-07-Points.txt": "baltic-07-ConnectedPoints",
  "http://www.cs.org.mk/boi2009/tasks.html": "balkan-09-reading",
  "usaco-696": "usaco-696",
  "https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/POI/official/2011/editorial/rot.pdf": "poi-11-TreeRotations",
  "joi-20-joitter": "joi-20-joitter",
  "equivalent to https://dmoj.ca/problem/acc3p4": "cses-1736",
  "cses-2166": "cses-2166",
  "https://ioinformatics.org/files/ioi2005solutions.pdf": "ioi-05-mountain",
  "Can use lazy seg in place of two BITs": "usaco-973",
  "http://s3-ap-northeast-1.amazonaws.com/data.cms.ioi-jp.org/open-2018/2018-open-bubblesort2-sol-en.pdf": "joi-18-BubbleSort2",
  "HE-twin-permutations": "he-TwinPermutations",
  "http://boi2011.ro/resurse/tasks/trapezoid-sol.pdf": "balkan-11-trapezoid",
  "https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/COCI/official/2017/contest3_solutions/solutions.pdf": "coci-16-zoltan",
  "Order of operations matters!": "ys-PointSetRangeComposite",
  "cses-2206": "cses-2206",
  "balkan-18-election": "balkan-18-election",
  "balkan-15-happiness": "balkan-15-happiness",
  "@CPH 14.3": "cses-1132",
  "AC-Subtree": "ac-subtree",
  "balkan-17-cityattractions": "balkan-17-CityAttractions",
  "usaco-793": "usaco-793",
  "apio-14-beads": "apio-14-beads",
  "https://codeforces.com/blog/entry/20226": "cf-576C",
  "poi-17-kon": "poi-17-containers",
  "static-range-inv": "ys-StaticRangeInversionsQuery",
  "apio-19-bridges": "apio-19-bridges",
  "DMOJ-fluid-dynamics": "dmoj-FluidDynamics",
  "AC-IndependentSet": "ac-IndependentSet",
  "similar to independent set on tree": "usaco-766",
  "poi-16-par": "poi-parade",
  "poi-04-szp": "poi-04-spies",
  "poi-08-maf": "poi-08-mafia",
  "coi-16-torrent": "coi-16-torrent",
  "equivalent to Baltic OI - Cat in a Tree.": "cses-1752",
  "baltic-16-swap": "baltic-16-swap",
  "cses-1193": "cses-1193",
  "cses-1194": "cses-1194",
  "cses-1707": "cses-1707",
  "usaco-620": "usaco-620",
  "usaco-671": "usaco-671",
  "usaco-1090": "usaco-1090",
  "usaco-695": "usaco-695",
  "cses-1676": "cses-1676",
  "Simulate process in reverse and maintain the # of connected components. Similar to [CSES Network Breakdown](https://cses.fi/problemset/task/1677)": "usaco-646",
  "usaco-789": "usaco-789",
  "usaco-992": "usaco-992",
  "usaco-669": "usaco-669",
  "baltic-16-park": "baltic-16-park",
  "Small to large merging is mentioned in the editorial, but we were unable to break solutions that just merged naively. Alternatively, just merge linked lists in $mathcal{O}(1)$ time.": "usaco-1042",
  "usaco-950": "usaco-950",
  "AC-DivGame": "ac-DivGame",
  "cses-1081": "cses-1081",
  "orac-lcm": "cf-1349A",
  "cses-1082": "cses-1082",
  "https://hsin.hr/ceoi2006/tasks/solutions.pdf": "ceoi-06-antenna",
  "https://codeforces.com/blog/entry/51010": "joi-17-Dragon2",
  "usaco-694": "usaco-694",
  "dp[time][city] -> money": "usaco-993",
  "let dp[i] -> max sum of skill levels for the first i cows, then precompute subarray maximums": "usaco-863",
  "dp[i][j] -> minimum sum of net sizes needed to catch m snakes with k changes, precompute maximums": "usaco-945",
  "dp[consider first i entries only][last breakout in first i occurs at j][k breakouts among first i entries] -> # changes": "usaco-815",
  "must be K consectutive of same color, complimetary counting for dp[up to position i][number of consecutive] -> number of ways, find closed form to reduce runtime": "usaco-791",
  "cses-1634": "cses-1634",
  "cses-1635": "cses-1635",
  "cses-1636": "cses-1636",
  "https://codeforces.com/blog/entry/70018": "cses-1093",
  "cses-1665": "cses-1665",
  "usaco-574": "usaco-574",
  "binary search on optimal ratio, then do knapsack on weight": "usaco-839",
  "dp[i][j][l] -> maximum amount of twos we can collect by checking first i numbers, taking j of them with total power of five equal to l": "cf-837D",
  "First consider the case where there are only two lines with the same class.": "usaco-897",
  "Prime factorize $K$.": "usaco-1045",
  "poi-04-mak": "poi-04-maximal",
  "cses-1073": "cses-1073",
  "Direct application of longest increasing subsequence": "usaco-496",
  "lmio-19-trusis": "lmio-19-triusis",
  "http://www.csc.kth.se/contest/boi/candy-spoiler.pdf": "baltic-09-candy",
  "ceoi-18-glo": "ceoi-18-GlobalWarming",
  "joi-16-matryoshka": "joi-16-matryoshka",
  "usaco-946": "usaco-946",
  "https://codeforces.com/blog/entry/82103": "cses-1712",
  "cses-2182": "cses-2182",
  "Can also do range XOR queries w/ update.": "cses-1648",
  "cses-1651": "cses-1651",
  "kattis-megainversions": "kattis-megainversions",
  "cses-1749": "cses-1749",
  "cses-1144": "cses-1144",
  "cses-1748": "cses-1748",
  "cses-1734": "cses-1734",
  "usaco-1041": "usaco-1041",
  "usaco-693": "usaco-693",
  "equivalent to [Kattis SSSP Non-Negative](https://open.kattis.com/problems/shortestpath1)": "cses-1671",
  "cses-1195": "cses-1195",
  "usaco-969": "usaco-969",
  "cses-1202": "cses-1202",
  "https://icpc.cs.vt.edu/hs/2016/judge/": "kattis-robotturtles",
  "cses-1196": "cses-1196",
  "joi-18-commuter-pass": "joi-18-CommuterPass",
  "joi-21-robot": "joi-21-robot",
  "apio-11-path": "apio-11-FindThePath",
  "balkan-12-shortestpaths": "balkan-12-ShortestPaths",
  "dp[first i characters in first string][first j characters in second string] -> longest common subsequence, transition if s[i] = t[j] for strings s and t": "lc-LongestCommonSubsequence",
  "cses-1746": "cses-1746",
  "cses-1639": "cses-1639",
  "usaco-670": "usaco-670",
  "usaco-598": "usaco-598",
  "dp[up to ith field on left side][up to jth field on right side] = maximum number of disjoint crosswalks": "usaco-718",
  "start from the middle, dp[row i][row j][length] = number of strings of length 2 * length + 1 with ends at row i and j": "usaco-553",
  "cses-1671": "cses-1644",
  "cses-1076": "cses-1076",
  "cses-1077": "cses-1077",
  "apio-15-bridge": "apio-15-PalembangBridges",
  "apio09-oil": "apio-09-DiggingForOil",
  "baltic-15-hac": "baltic-15-hacker",
  "lc-largest-rectangle-in-histogram": "lc-MaxHistogramArea",
  "cses-1147": "cses-1147",
  "cses-2416": "cses-2416",
  "ioi-04-empodia": "ioi-04-empodia",
  "https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/COI/official/2015/final-exam1/solutions.pdf": "coi-15-arulje",
  "https://csacademy.com/contest/ceoi-2017-day-2/task/palindromic-partitions/solution/": "ceoi-17-PalindromicPartitions",
  "usaco-741": "usaco-741",
  "usaco-599": "usaco-599",
  "https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/COCI/official/2017/contest4_solutions": "coci-17-osmosmjerka",
  "https://boi2018.progolymp.se/spoiler-day2.pdf": "baltic-18-genetics",
  "https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/COCI/official/2017/contest2_solutions": "coci-16-zamjene",
  "https://github.com/mostafa-saad/MyCompetitiveProgramming/blob/master/Olympiad/COI/official/2016/solutions.pdf": "coi-16-palinilap",
  "cses-1681": "cses-1681",
  "kattis-quantum": "kattis-quantumsuperposition",
  "not explicitly given, but graph is a DAG": "usaco-1017",
  "cses-1757": "cses-1757",
  "equivalent to https://judge.yosupo.jp/problem/vertex_add_subtree_sum": "cses-1137",
  "cses-1138": "cses-1138",
  "usaco-921": "usaco-921",
  "usaco-970": "usaco-970",
  "http://www.ioi2009.org/GetResource?id=1969": "ioi-09-regions",
  "@CPH 8.1": "cses-1660",
  "cf-books": "cf-279B",
  "cses-1641": "cses-1641",
  "cellular-network": "cf-702C",
  "usaco-643": "usaco-643",
  "usaco-918": "usaco-918",
  "cf-garland": "cf-814C",
  "ceoi-10-tower": "ceoi-10-AHugeTower",
  "usaco-690": "usaco-690",
  "usaco-858": "usaco-858",
  "usaco-594": "usaco-594",
  "usaco-1038": "usaco-1038",
  "requires some rather tricky analysis to speed up naive $mathcal{O}(Nlog N)$ solution": "usaco-991",
  "usaco-624": "usaco-624",
  "cses-1620": "cses-1620",
  "cses-1085": "cses-1085",
  "cses-2422": "cses-2422",
  "cf-magship": "cf-1117C",
  "binary search on time with epsilon and then find if there exist non-empty intersection of the ranges (maximum of left points and minimum of right points)": "cf-782B",
  "preparing-for-mergesort": "cf-847B",
  "cf-packmen": "cf-847E",
  "first find out which is the best way to construct the graph, then it's possible to see that the number of edges increase for some range and then decrease; so, using binary search find the last i such that f(i-1)<=f(i)": "cf-818F",
  "baltic-12-mobile": "baltic-12-mobile",
  "usaco-644": "usaco-644",
  "usaco-668": "usaco-668",
  "kattis-birthday": "kattis-birthday",
  "cses-1682": "cses-1682",
  "kattis-laneswitching": "kattis-LaneSwitching",
  "usaco-920": "usaco-920",
  "apio-11-color": "apio-11-TableColoring",
  "usaco-895": "usaco-895",
  "usaco-570": "usaco-570",
  "usaco-596": "usaco-596",
  "usaco-740": "usaco-740",
  "usaco-716": "usaco-716",
  "ccc-20-escape": "cco-EscapeRoom",
  "usaco-811": "usaco-811",
  "Implement Floyd's Algorithm! (You only actually need 3 friends to solve the problem!)": "cf-1137D",
  "usaco-764": "usaco-764",
  "cses-1751": "cses-1751",
  "cses-1074": "cses-1074",
  "cses-1084": "cses-1084",
  "cses-1090": "cses-1090",
  "@CPH 6.3": "cses-1630",
  "cses-1632": "cses-1632",
  "cses-1161": "cses-1161",
  "CF-726B": "cf-762B",
  "usaco-835": "usaco-835",
  "usaco-571": "usaco-571",
  "usaco-573": "usaco-573",
  "usaco-714": "usaco-714",
  "usaco-990": "usaco-990",
  "cses-1091": "cses-1091",
  "cses-1163": "cses-1163",
  "cses-1164": "cses-1164",
  "usaco-763": "usaco-763",
  "usaco-813": "usaco-813",
  "sapo-18-stadium": "sapo-18-stadium",
  "usaco-788": "usaco-788",
  "ioi-10-traffic": "ioi-10-traffic",
  "usaco-968": "usaco-968",
  "usaco-1062": "usaco-1062",
  "@CPH 14.2": "cses-1131",
  "cses-1132": "cses-1132",
  "cses-1133": "cses-1133",
  "poi-17-sab": "poi-17-sabotage",
  "ccc-reviews": "ccc-PhenomenalReviews",
  "poi-14-hot": "poi-14-hotels",
  "cses-2179": "cses-2179",
  "wizards-tour": "cf-860D",
  "lc-find-pivot-index": "lc-FindPivotIndex",
  "usaco-572": "usaco-572",
  "usaco-595": "usaco-595",
  "usaco-691": "usaco-691",
  "cses-1661": "cses-1661",
  "cses-1662": "cses-1662",
  "usaco-715": "usaco-715",
  "cses-1650": "cses-1650",
  "usaco-104": "usaco-104",
  "kickstart-20-c-candies": "ks-CandiesTestSet1",
  "AC-MultipleOf2019": "ac-MultipleOf2019",
  "Enumerate the right endpoint while maintaining the lowest prefix sum that currently exists to the left": "cses-1643",
  "usaco-919": "usaco-919",
  "Treat areas that currently have K-1 layers of paint as having a value of 1, those having K layers of paint as having a value of -1, and the rest as having a value of 0. For each pair of x-coordinates, find the maximum subrectangle whose left side is located at the first x-coordinate and the right side is located at the second x-coordinate. This can be done with maximum subarray sum and prefix sums of each row. Do something similar with each pair of y-coordinates (fixing the top and bottom of the rectangle). Also notice that whenever two disjoint rectangles are drawn, there always exists a horizontal or vertical line separating them. Enumerate the location of the line, and find maximum subrectangle of each side using the information that we precalculated.": "usaco-923",
  "cses-1619": "cses-1619",
  "usaco-786": "usaco-786",
  "usaco-787": "usaco-787",
  "usaco-896": "usaco-896",
  "usaco-1064": "usaco-1064",
  "usaco-645": "usaco-645",
  "@CPH 5.3": "cses-1624",
  "@CPH 5.4": "cses-1625",
  "usaco-857": "usaco-857",
  "usaco-615": "usaco-615",
  "usaco-639": "usaco-639",
  "usaco-1060": "usaco-1060",
  "usaco-963": "usaco-963",
  "usaco-736": "usaco-736",
  "usaco-1011": "usaco-1011",
  "usaco-784": "usaco-784",
  "usaco-712": "usaco-712",
  "Loop over each position. Then, loop over each non-spotty cow in a nested loop and check whether a spotty cow has the same character as a non-spotty cow to figure out whether the position explains spottiness.": "usaco-739",
  "usaco-617": "usaco-617",
  "usaco-569": "usaco-569",
  "usaco-640": "usaco-640",
  "usaco-619": "usaco-619",
  "usaco-894": "usaco-894",
  "Color each vertex a color that is not used by any of it's adjacent vertices. Since each vertex has at most three neighbors, there will always be a valid color.": "usaco-916",
  "usaco-940": "usaco-940",
  "usaco-965": "usaco-965",
  "usaco-1013": "usaco-1013",
  "usaco-941": "usaco-941",
  "usaco-833": "usaco-833",
  "See below.": "usaco-1012",
  "usaco-689": "usaco-689",
  "usaco-785": "usaco-785",
  "Greedily increment/decrement Bessies speed to fit the conditions until her total distance exceeds K.": "usaco-989",
  "cses-1621": "cses-1621",
  "cses-1640": "cses-1640",
  "Store all substrings in a map of <string, count>, and then find the longest length such that no substring of that length appears twice.": "usaco-964",
  "usaco-831": "usaco-831",
  "usaco-687": "usaco-687",
  "usaco-667": "usaco-667",
  "jury-marks": "cf-831C",
  "cf-kayaking": "cf-863B",
  "usaco-713": "usaco-713",
  "usaco-592": "usaco-592",
  "usaco-663": "usaco-663",
  "usaco-759": "usaco-783",
  "just pour 100 times": "usaco-855",
  "usaco-665": "usaco-665",
  "usaco-568": "usaco-568",
  "usaco-616": "usaco-616",
  "usaco-664": "usaco-664",
  "usaco-593": "usaco-593",
  "usaco-591": "usaco-591",
  "usaco-987": "usaco-987"
}
